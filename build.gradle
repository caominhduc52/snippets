import java.time.Duration

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
    id("com.avast.gradle.docker-compose") version "0.17.12"
}

group = 'com.duccao.learn'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    google()

    maven {
        url 'https://packages.confluent.io/maven/'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.postgresql:postgresql'
    implementation 'com.duccao.starterkafka:starter-kafka:0.0.1-SNAPSHOT'
    implementation("net.logstash.logback:logstash-logback-encoder:8.0")
    implementation("org.apache.kafka:kafka-clients:3.9.1")
    implementation("org.apache.kafka:kafka-streams")
    implementation("io.confluent:kafka-avro-serializer:5.5.14")
    implementation("io.confluent:kafka-schema-registry-client:5.5.14")
    implementation("org.apache.avro:avro:1.11.4")
    compileOnly("org.projectlombok:lombok:1.18.38")
    annotationProcessor("org.projectlombok:lombok:1.18.38")

    testCompileOnly("org.projectlombok:lombok:1.18.38")
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testAnnotationProcessor("org.projectlombok:lombok:1.18.38")

}

tasks.named('test') {
    useJUnitPlatform()
}

avro {
    stringType = "CharSequence"
}

dockerCompose {
    useComposeFiles = ['docker-compose.yml']
    dockerComposeWorkingDirectory = project.file('src/main/docker')
    composeAdditionalArgs = ['--compatibility']
    dockerComposeStopTimeout = Duration.ofSeconds(120)
}
