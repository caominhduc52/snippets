version: '3.3'

services:
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.2.2
#    container_name: zookeeper
#    hostname: zookeeper
#    ports:
#      - "32181:32181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 32181
#      ZOOKEEPER_TICK_TIME: 2000
#
#  kafka1:
#    image: confluentinc/cp-enterprise-kafka:7.2.2
#    container_name: kafka1
#    hostname: kafka1
#    ports:
#      - "9092:9092"
#      - "29092:29092"
#    depends_on:
#      - zookeeper
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:32181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:29092
#      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:32181
#      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
#      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
#    healthcheck:
#      test: [ "CMD", "kafka-topics", "--bootstrap-server", "kafka1:29092", "--list" ]
#      interval: 10s
#      timeout: 10s
#      retries: 3
#
#  schema-registry:
#    image: confluentinc/cp-schema-registry:7.2.2
#    hostname: schema-registry
#    container_name: schema-registry
#    depends_on:
#      - zookeeper
#      - kafka1
#    ports:
#      - "8081:8081"
#    environment:
#      SCHEMA_REGISTRY_HOST_NAME: schema-registry
#      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka1:29092'
#    healthcheck:
#      test: ["CMD", "curl", "http://localhost:8081/subjects"]
#      interval: 20s
#      timeout: 10s
#      retries: 20
#
#  kafka-create-topics:
#    image: confluentinc/cp-kafka:7.2.2
#    depends_on:
#      kafka1:
#        condition: service_healthy
#    hostname: kafka-create-topic
#    environment:
#      KAFKA_TOPICS: "frontline.transaction-assessment-record"
#      KAFKA_BROKER_ID: ignored
#      KAFKA_BROKER_CONNECT: 'kafka1:29092'
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:32181'
#    tty: true
#    command: bash -c -v 'echo waiting for kafka to be ready... &&
#      cub kafka-ready -b $${KAFKA_BROKER_CONNECT} 1 40 &&
#      kafka_topics=$$(echo $$KAFKA_TOPICS | tr " " "\n") &&
#      for kafka_topic in $$kafka_topics;
#      do
#      echo "Adding topic $$kafka_topic" && kafka-topics --create --if-not-exists --bootstrap-server kafka1:29092 --partitions 3 --replication-factor 1 --topic $$kafka_topic;
#      done &&
#      exit 0'

#  control-center:
#    image: confluentinc/cp-enterprise-control-center:7.2.2
#    container_name: control-center
#    restart: always
#    depends_on:
#      - zookeeper
#      - kafka1
#      - schema-registry
#    ports:
#      - "9021:9021"
#    environment:
#      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka1:29092'
#      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#      CONTROL_CENTER_REPLICATION_FACTOR: 1
#      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
#      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
#      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
#      PORT: 9021

  postgres-db:
    image: postgres:12.4-alpine
#    command: postgres -c 'max_connection=200'
    container_name: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -Upostgres"]
      interval: 15s
      timeout: 5s
      retries: 20
    ulimits:
      nproc: 65535
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    stop_grace_period: 10s
